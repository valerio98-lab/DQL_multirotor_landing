#usda 1.0
(
    customLayerData = {
        dictionary audioSettings = {
            double dopplerLimit = 2
            double dopplerScale = 1
            string enableDistanceDelay = "off"
            string enableDoppler = "off"
            string enableInterauralDelay = "off"
            double nonSpatialTimeScale = 1
            double spatialTimeScale = 1
            double speedOfSound = 340
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 1000)
                double radius = 192.6818115234375
            }
            dictionary Perspective = {
                double3 position = (1.0769813419559282, 2.1823230720601265, 0.46116363814958794)
                double radius = 135.68982927253236
                double3 target = (-0.3178576481922306, 0.0005271063958067757, 0.034535150616846755)
            }
            dictionary Right = {
                double3 position = (-19.674232123709118, -1000, 32.255047378350966)
                double radius = 83.64903564453125
            }
            dictionary Top = {
                double3 position = (6.503535905665511e-14, 1000.0000000000061, -9.532137787567844e-13)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./iw_hub.usd"
        }
        int refinementOverrideImplVersion = 0
        dictionary renderSettings = {
        }
    }
    defaultPrim = "iw_hub"
    metersPerUnit = 1
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "staticPlaneActor"
{
    token visibility = "inherited"
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, -0.09999999776482582)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Mesh "geom"
    {
        uniform bool doubleSided = 1
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        point3f[] points = [(-2500, -2500, 0), (2500, -2500, 0), (2500, 2500, 0), (-2500, 2500, 0)]
        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "varying"
        )
        float3 xformOp:scale = (0.01, 0.01, 0.01)
        uniform token[] xformOpOrder = ["xformOp:scale"]
    }

    def Plane "collisionPlane" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "MaterialBindingAPI"]
    )
    {
        uniform token axis = "Z"
        rel material:binding = None (
            bindMaterialAs = "weakerThanDescendants"
        )
        rel material:binding:physics = None (
            bindMaterialAs = "weakerThanDescendants"
        )
        uniform token purpose = "guide"
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.01, 0.01, 0.01)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

def PhysicsScene "physicsScene" (
    prepend apiSchemas = ["PhysxSceneAPI"]
)
{
    vector3f physics:gravityDirection = (0, 0, -1)
    float physics:gravityMagnitude = 10
    float physxScene:bounceThreshold = 200
    uniform token physxScene:broadphaseType = "MBP"
    uniform token physxScene:collisionSystem = "PCM"
    bool physxScene:enableCCD = 1
    bool physxScene:enableEnhancedDeterminism = 0
    bool physxScene:enableGPUDynamics = 0
    bool physxScene:enableStabilization = 1
    float physxScene:frictionCorrelationDistance = 0.00025
    float physxScene:frictionOffsetThreshold = 0.04
    uniform token physxScene:frictionType = "patch"
    uint physxScene:gpuConstraintBufferCapacity = 33554432
    uint physxScene:gpuContactBufferCapacity = 25165824
    uint physxScene:gpuContactStreamSize = 524288
    uint physxScene:gpuForceStreamCapacity = 1048576
    uint physxScene:gpuFoundLostPairsCapacity = 262144
    uint physxScene:gpuHeapCapacity = 67108864
    uint physxScene:gpuMaxNumPartitions = 8
    uint physxScene:gpuPatchStreamSize = 81920
    uint physxScene:gpuTempBufferCapacity = 16777216
    bool physxScene:invertCollisionGroupFilter = 0
    uniform token physxScene:solverType = "TGS"
}

def DistantLight "DistantLight" (
    prepend apiSchemas = ["ShapingAPI"]
)
{
    float angle = 1
    custom float inputs:angle = 1
    custom float inputs:intensity = 3000
    custom float inputs:shaping:cone:angle = 180
    custom float inputs:shaping:cone:softness = 0
    custom float inputs:shaping:focus = 0
    custom color3f inputs:shaping:focusTint = (0, 0, 0)
    float intensity = 3000
    float shaping:cone:angle = 180
    float shaping:cone:softness
    float shaping:focus
    color3f shaping:focusTint
    asset shaping:ies:file
    float3 xformOp:rotateZYX = (0, 45, 0)
    float3 xformOp:scale = (0.01, 0.01, 0.01)
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
}

def Xform "iw_hub" (
    prepend apiSchemas = ["PhysxArticulationAPI", "PhysicsArticulationRootAPI"]
)
{
    bool physxArticulation:enabledSelfCollisions = 0
    float physxArticulation:sleepThreshold = 0.005
    int physxArticulation:solverPositionIterationCount = 64
    int physxArticulation:solverVelocityIterationCount = 32
    float physxArticulation:stabilizationThreshold = 0.0009999999

    def Xform "chassis" (
        prepend apiSchemas = ["PhysxRigidBodyAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        kind = "model"
    )
    {
        rel collisionGroup
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        bool physics:kinematicEnabled = 0
        float physics:mass = 30
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        uniform bool physics:startsAsleep = 0
        vector3f physics:velocity = (0, 0, 0)
        rel physicsMaterial
        float physxRigidBody:angularDamping = 0.05
        bool physxRigidBody:disableGravity = 0
        bool physxRigidBody:enableCCD = 0
        bool physxRigidBody:enableSpeculativeCCD = 0
        float physxRigidBody:linearDamping = 0
        int physxRigidBody:lockedPosAxis = 0
        int physxRigidBody:lockedRotAxis = 0
        float physxRigidBody:maxAngularVelocity = 5729.58
        float physxRigidBody:maxContactImpulse = inf
        float physxRigidBody:maxDepenetrationVelocity = 3
        float physxRigidBody:maxLinearVelocity = inf
        float physxRigidBody:sleepThreshold = 5e-7
        int physxRigidBody:solverPositionIterationCount = 16
        int physxRigidBody:solverVelocityIterationCount = 1
        float physxRigidBody:stabilizationThreshold = 0.0009999999
        token visibility = "inherited"
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Collision" (
            delete apiSchemas = ["PhysicsMassAPI"]
            prepend apiSchemas = ["PhysxCollisionAPI", "PhysicsMeshCollisionAPI", "PhysicsCollisionAPI", "MaterialBindingAPI"]
            kind = "model"
        )
        {
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            custom rel material:binding:physics = None
            uniform token physics:approximation = "boundingCube"
            bool physics:collisionEnabled = 1
            float physxCollision:contactOffset = 0.01
            float physxCollision:minTorsionalPatchRadius = 0
            float physxCollision:restOffset = 0
            float physxCollision:torsionalPatchRadius = 0
            double size = 0.9999999776482582
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1.42, 0, 0, 0), (0, 0.65, 0, 0), (0, 0, 0.1, 0), (-0.3200799928456545, 0, 0.004819999892264604, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def Cube "Collision_01" (
            delete apiSchemas = ["PhysicsMassAPI"]
            prepend apiSchemas = ["PhysxCollisionAPI", "PhysicsMeshCollisionAPI", "PhysicsCollisionAPI", "MaterialBindingAPI"]
            kind = "model"
        )
        {
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            custom rel material:binding:physics = None
            uniform token physics:approximation = "boundingCube"
            bool physics:collisionEnabled = 1
            float physxCollision:contactOffset = 0.01
            float physxCollision:minTorsionalPatchRadius = 0
            float physxCollision:restOffset = 0
            float physxCollision:torsionalPatchRadius = 0
            double size = 0.9999999776482582
            token visibility = "invisible"
            matrix4d xformOp:transform = ( (1.15, 0, 0, 0), (0, 0.65, 0, 0), (0, 0, 0.1, 0), (-0.32905999264493585, 0, 0.09370999790541829, 1) )
            uniform token[] xformOpOrder = ["xformOp:transform"]
        }

        def "Body" (
            prepend references = @HighResProps/Body_v2.usd@
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.0281546752416414e-7, 0.9999977060503804, 0), (0, -0.9999977060503804, 2.0281546752416414e-7, 0), (0, 0.08299999814480544, 0, 1) )

            over "Looks"
            {
                over "Robot"
                {
                    over "Robot"
                    {
                        bool inputs:enable_ORM_texture = 1
                        float inputs:metallic_texture_influence = 0.9
                        asset inputs:normalmap_texture (
                            colorSpace = "raw"
                        )
                        float inputs:reflection_roughness_texture_influence = 1
                    }
                }
            }

            over "Body"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -4.3711390001862426e-8, -0.9999999999999992, 0), (0, 0.9999999999999992, -4.3711390001862426e-8, 0), (0, 0, 0, 1) )

                over "Mesh" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3 xformOp:scale = (0.01, 0.01, 0.01)
                    uniform token[] xformOpOrder = ["xformOp:scale"]
                }
            }
        }
    }

    def Xform "left_wheel" (
        prepend apiSchemas = ["PhysxRigidBodyAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        kind = "model"
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        bool physics:kinematicEnabled = 0
        float physics:mass = 3
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        uniform bool physics:startsAsleep = 0
        vector3f physics:velocity = (0, 0, 0)
        float physxRigidBody:angularDamping = 0.05
        bool physxRigidBody:disableGravity = 0
        bool physxRigidBody:enableCCD = 0
        bool physxRigidBody:enableSpeculativeCCD = 0
        float physxRigidBody:linearDamping = 0
        int physxRigidBody:lockedPosAxis = 0
        int physxRigidBody:lockedRotAxis = 0
        float physxRigidBody:maxAngularVelocity = 5729.58
        float physxRigidBody:maxContactImpulse = inf
        float physxRigidBody:maxDepenetrationVelocity = 3
        float physxRigidBody:maxLinearVelocity = inf
        float physxRigidBody:sleepThreshold = 5e-7
        int physxRigidBody:solverPositionIterationCount = 16
        int physxRigidBody:solverVelocityIterationCount = 1
        float physxRigidBody:stabilizationThreshold = 0.0009999999
        token visibility = "inherited"
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0.2896299869649859, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Left_Wheel" (
            prepend references = @HighResProps/Left_Wheel.usd@
        )
        {
            token visibility = "inherited"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.0281547673355791e-7, 0.9999977514580249, 0), (0, -0.9999977514580243, 2.0281547673355778e-7, 0), (0, -0.0015999999642372132, 0, 1) )

            over "Left_Wheel"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854060710945e-8, -0.9999999315429186, 0), (0, 0.9999999315429186, 3.422854060710945e-8, 0), (0.000002216110247479149, -0.0000015366248792232965, 0, 1) )

                over "Mesh_002" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3 xformOp:scale = (0.01, 0.01, 0.01)
                    uniform token[] xformOpOrder = ["xformOp:scale"]
                }
            }
        }

        def Cylinder "Cylinder" (
            prepend apiSchemas = ["PhysxCollisionAPI", "PhysicsCollisionAPI", "MaterialBindingAPI"]
            kind = "model"
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            double height = 0.9999999776482582
            custom rel material:binding:physics = </iw_hub/wheel_material>
            bool physics:collisionEnabled = 1
            float physxCollision:contactOffset = 0.02
            float physxCollision:minTorsionalPatchRadius = 0.005
            float physxCollision:restOffset = 0
            float physxCollision:torsionalPatchRadius = 0.01
            double radius = 0.4999999888241291
            custom bool refinementEnableOverride = 1
            custom int refinementLevel = 2
            token visibility = "invisible"
            double3 xformOp:rotateZYX = (89.99998474121094, 0, -0)
            double3 xformOp:scale = (0.1599999964237213, 0.15999963879585266, 0.049999888986349106)
            double3 xformOp:translate = (0, 0, -5.841707048034995e-8)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }
    }

    def Xform "right_wheel" (
        prepend apiSchemas = ["PhysxRigidBodyAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        kind = "model"
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        bool physics:kinematicEnabled = 0
        float physics:mass = 3
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        uniform bool physics:startsAsleep = 0
        vector3f physics:velocity = (0, 0, 0)
        float physxRigidBody:angularDamping = 0.05
        bool physxRigidBody:disableGravity = 0
        bool physxRigidBody:enableCCD = 0
        bool physxRigidBody:enableSpeculativeCCD = 0
        float physxRigidBody:linearDamping = 0
        int physxRigidBody:lockedPosAxis = 0
        int physxRigidBody:lockedRotAxis = 0
        float physxRigidBody:maxAngularVelocity = 5729.58
        float physxRigidBody:maxContactImpulse = inf
        float physxRigidBody:maxDepenetrationVelocity = 3
        float physxRigidBody:maxLinearVelocity = inf
        float physxRigidBody:sleepThreshold = 5e-7
        int physxRigidBody:solverPositionIterationCount = 16
        int physxRigidBody:solverVelocityIterationCount = 1
        float physxRigidBody:stabilizationThreshold = 0.0009999999
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, -0.2896299869649859, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def "Right_Wheel" (
            prepend references = @HighResProps/Right_Wheel.usd@
        )
        {
            token visibility = "inherited"
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.0281510935210506e-7, 0.9999959400547104, 0), (0, -0.9999959400547105, 2.028151093521051e-7, 0), (0, 0.0015999999642372132, 0, 1) )

            over "Right_Wheel"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 3.422854060710945e-8, -0.9999999315429186, 0), (0, 0.9999999315429186, 3.422854060710945e-8, 0), (0.0000023324370910613877, -0.0000015411700243241327, 0, 1) )

                over "Mesh_005" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3 xformOp:scale = (0.01, 0.01, 0.01)
                    uniform token[] xformOpOrder = ["xformOp:scale"]
                }
            }
        }

        def Cylinder "Cylinder" (
            prepend apiSchemas = ["PhysxCollisionAPI", "PhysicsCollisionAPI", "MaterialBindingAPI"]
            kind = "model"
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            double height = 0.9999999776482582
            custom rel material:binding:physics = </iw_hub/wheel_material>
            bool physics:collisionEnabled = 1
            float physxCollision:contactOffset = 0.02
            float physxCollision:minTorsionalPatchRadius = 0.005
            float physxCollision:restOffset = 0
            float physxCollision:torsionalPatchRadius = 0.01
            double radius = 0.4999999888241291
            custom bool refinementEnableOverride = 1
            custom int refinementLevel = 2
            token visibility = "invisible"
            double3 xformOp:rotateZYX = (90, 0, 0)
            double3 xformOp:scale = (0.1599999964237213, 0.1599999964237213, 0.05000000074505806)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }
    }

    def Xform "lift" (
        prepend apiSchemas = ["PhysxRigidBodyAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        kind = "model"
    )
    {
        rel collisionGroup
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        bool physics:kinematicEnabled = 0
        float physics:mass = 10
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        uniform bool physics:startsAsleep = 0
        vector3f physics:velocity = (0, 0, 0)
        rel physicsMaterial
        float physxRigidBody:angularDamping = 0.05
        bool physxRigidBody:disableGravity = 0
        bool physxRigidBody:enableCCD = 0
        bool physxRigidBody:enableSpeculativeCCD = 0
        float physxRigidBody:linearDamping = 0
        int physxRigidBody:lockedPosAxis = 0
        int physxRigidBody:lockedRotAxis = 0
        float physxRigidBody:maxAngularVelocity = 5729.58
        float physxRigidBody:maxContactImpulse = inf
        float physxRigidBody:maxDepenetrationVelocity = 3
        float physxRigidBody:maxLinearVelocity = inf
        float physxRigidBody:sleepThreshold = 5e-7
        int physxRigidBody:solverPositionIterationCount = 16
        int physxRigidBody:solverVelocityIterationCount = 1
        float physxRigidBody:stabilizationThreshold = 0.0009999999
        token visibility = "inherited"
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Collision" (
            prepend apiSchemas = ["PhysxCollisionAPI", "PhysicsMeshCollisionAPI", "PhysicsCollisionAPI", "PhysicsMassAPI", "MaterialBindingAPI"]
            kind = "model"
        )
        {
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            custom rel material:binding:physics = None
            uniform token physics:approximation = "boundingCube"
            point3f physics:centerOfMass = (0, 0, 0)
            bool physics:collisionEnabled = 1
            float physxCollision:contactOffset = 0.01
            float physxCollision:minTorsionalPatchRadius = 0
            float physxCollision:restOffset = 0
            float physxCollision:torsionalPatchRadius = 0
            double size = 0.9999999776482582
            token visibility = "invisible"
            float3 xformOp:rotateZYX = (0, 0, 0)
            float3 xformOp:scale = (1.01, 0.65, 0.05)
            double3 xformOp:translate = (-0.255899694280196, 0, 0.12227921726684644)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
        }

        def "Lift" (
            prepend references = @HighResProps/Lift_v2.usd@
        )
        {
            matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 2.0281539129131313e-7, 0.9999973301782783, 0), (0, -0.9999973301782783, 2.0281539129131313e-7, 0), (0, 0.08299999814480544, 0, 1) )

            over "Lift"
            {
                matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, -4.3711390001862426e-8, -0.9999999999999992, 0), (0, 0.9999999999999992, -4.3711390001862426e-8, 0), (0, 0, 0, 1) )

                over "Mesh_012" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    float3 xformOp:scale = (0.01, 0.01, 0.01)
                    uniform token[] xformOpOrder = ["xformOp:scale"]
                }
            }
        }
    }

    def Xform "left_swivel" (
        prepend apiSchemas = ["PhysxRigidBodyAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        kind = "model"
    )
    {
        rel collisionGroup
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        bool physics:kinematicEnabled = 0
        float physics:mass = 0.5
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        uniform bool physics:startsAsleep = 0
        vector3f physics:velocity = (0, 0, 0)
        rel physicsMaterial
        float physxRigidBody:angularDamping = 0.05
        bool physxRigidBody:enableCCD = 0
        bool physxRigidBody:enableSpeculativeCCD = 0
        float physxRigidBody:linearDamping = 0
        int physxRigidBody:lockedPosAxis = 0
        int physxRigidBody:lockedRotAxis = 0
        float physxRigidBody:maxAngularVelocity = 5729.58
        float physxRigidBody:maxDepenetrationVelocity = 3
        float physxRigidBody:maxLinearVelocity = inf
        float physxRigidBody:sleepThreshold = 5e-7
        int physxRigidBody:solverPositionIterationCount = 16
        int physxRigidBody:solverVelocityIterationCount = 1
        float physxRigidBody:stabilizationThreshold = 0.0009999999
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.6772199860836565, 0.09347999363809834, 0.022679998367726828)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Collision" (
            prepend apiSchemas = ["PhysxCollisionAPI", "PhysicsMeshCollisionAPI", "PhysicsCollisionAPI", "PhysicsMassAPI", "MaterialBindingAPI"]
            kind = "model"
        )
        {
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            custom rel material:binding:physics = None
            uniform token physics:approximation = "boundingCube"
            point3f physics:centerOfMass = (0, 0, 0)
            bool physics:collisionEnabled = 0
            float physxCollision:contactOffset = 0.02
            float physxCollision:minTorsionalPatchRadius = 0
            float physxCollision:restOffset = 0
            float physxCollision:torsionalPatchRadius = 0
            uniform token purpose = "guide"
            double size = 0.9999999776482582
            float3 xformOp:scale = (0.1, 0.1, 0.1)
            uniform token[] xformOpOrder = ["xformOp:scale"]
        }

        def "Left_Swivel" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            prepend references = @HighResProps/Left_Swivel.usd@
        )
        {
            matrix4d xformOp:transform = ( (1.1920922099105693e-9, -0.009999993816020599, -1.1920922331471445e-9, 0), (-3.365285991076676e-18, -4.336884916702026e-18, 0.009999993816019558, 0), (-0.009999993816020106, 9.714374165441877e-18, 1.1920922221923385e-9, 0), (0, 0, 0, 1) )
        }
    }

    def Xform "right_swivel" (
        prepend apiSchemas = ["PhysxRigidBodyAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        kind = "model"
    )
    {
        rel collisionGroup
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        bool physics:kinematicEnabled = 0
        float physics:mass = 0.5
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        uniform bool physics:startsAsleep = 0
        vector3f physics:velocity = (0, 0, 0)
        rel physicsMaterial
        float physxRigidBody:angularDamping = 0.05
        bool physxRigidBody:enableCCD = 0
        bool physxRigidBody:enableSpeculativeCCD = 0
        float physxRigidBody:linearDamping = 0
        int physxRigidBody:lockedPosAxis = 0
        int physxRigidBody:lockedRotAxis = 0
        float physxRigidBody:maxAngularVelocity = 5729.58
        float physxRigidBody:maxDepenetrationVelocity = 3
        float physxRigidBody:maxLinearVelocity = inf
        float physxRigidBody:sleepThreshold = 5e-7
        int physxRigidBody:solverPositionIterationCount = 16
        int physxRigidBody:solverVelocityIterationCount = 1
        float physxRigidBody:stabilizationThreshold = 0.0009999999
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.6772199860836565, -0.09347999363809834, 0.022679998367726828)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Collision" (
            prepend apiSchemas = ["PhysxCollisionAPI", "PhysicsMeshCollisionAPI", "PhysicsCollisionAPI", "PhysicsMassAPI", "MaterialBindingAPI"]
            kind = "model"
        )
        {
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            custom rel material:binding:physics = None
            uniform token physics:approximation = "boundingCube"
            point3f physics:centerOfMass = (0, 0, 0)
            bool physics:collisionEnabled = 0
            float physxCollision:contactOffset = 0.02
            float physxCollision:minTorsionalPatchRadius = 0
            float physxCollision:restOffset = 0
            float physxCollision:torsionalPatchRadius = 0
            uniform token purpose = "guide"
            double size = 0.9999999776482582
            float3 xformOp:scale = (0.1, 0.1, 0.1)
            uniform token[] xformOpOrder = ["xformOp:scale"]
        }

        def "Right_Swivel" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            prepend references = @HighResProps/Right_Swivel.usd@
        )
        {
            matrix4d xformOp:transform = ( (1.1920912226799939e-9, -0.009999985471379405, -1.1920912288294924e-9, 0), (-3.989344442603912e-18, 3.204043798390818e-19, 0.00999998547137687, 0), (-0.00999998547137792, -3.582685289475133e-18, 1.1920912247267845e-9, 0), (0, 0, 0, 1) )
        }
    }

    def Xform "left_caster" (
        prepend apiSchemas = ["PhysxRigidBodyAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        kind = "model"
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float physics:density = 1000.0001
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        uniform bool physics:startsAsleep = 0
        vector3f physics:velocity = (0, 0, 0)
        float physxRigidBody:angularDamping = 0.05
        bool physxRigidBody:disableGravity = 0
        bool physxRigidBody:enableCCD = 0
        bool physxRigidBody:enableSpeculativeCCD = 0
        float physxRigidBody:linearDamping = 0
        int physxRigidBody:lockedPosAxis = 0
        int physxRigidBody:lockedRotAxis = 0
        float physxRigidBody:maxAngularVelocity = 5729.58
        float physxRigidBody:maxContactImpulse = inf
        float physxRigidBody:maxDepenetrationVelocity = 3
        float physxRigidBody:maxLinearVelocity = inf
        float physxRigidBody:sleepThreshold = 5e-7
        int physxRigidBody:solverPositionIterationCount = 16
        int physxRigidBody:solverVelocityIterationCount = 1
        float physxRigidBody:stabilizationThreshold = 0.0009999999
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.6772199860836565, 0.09347999363809834, -0.010319999225735677)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "Collision" (
            prepend apiSchemas = ["PhysxCollisionAPI", "PhysicsMeshCollisionAPI", "PhysicsCollisionAPI", "PhysicsMassAPI", "MaterialBindingAPI"]
            kind = "model"
        )
        {
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            custom rel material:binding:physics = </iw_hub/caster_material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            uniform token physics:approximation = "boundingSphere"
            point3f physics:centerOfMass = (0, 0, 0)
            bool physics:collisionEnabled = 1
            float physxCollision:contactOffset = 0.02
            float physxCollision:minTorsionalPatchRadius = 0
            float physxCollision:restOffset = 0
            float physxCollision:torsionalPatchRadius = 0
            double radius = 0.4999999888241291
            token visibility = "invisible"
            float3 xformOp:scale = (0.14, 0.14, 0.14)
            uniform token[] xformOpOrder = ["xformOp:scale"]
        }

        def "Inner_Left_Wheel" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            prepend references = @HighResProps/Inner_Left_Wheel.usd@
        )
        {
            matrix4d xformOp:transform = ( (1.1920918013053075e-9, -0.00999999023974499, -1.1920918065874796e-9, 0), (-2.4283989988201543e-18, -3.894668794895187e-18, 0.00999999023974331, 0), (-0.009999990239744072, -7.147252945391093e-18, 1.1920918004812005e-9, 0), (0, 0, 0, 1) )
        }
    }

    def Xform "right_caster" (
        prepend apiSchemas = ["PhysxRigidBodyAPI", "PhysicsRigidBodyAPI", "PhysicsMassAPI"]
        kind = "model"
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        bool physics:kinematicEnabled = 0
        float physics:mass = 1
        quatf physics:principalAxes = (1, 0, 0, 0)
        bool physics:rigidBodyEnabled = 1
        uniform bool physics:startsAsleep = 0
        vector3f physics:velocity = (0, 0, 0)
        float physxRigidBody:angularDamping = 0.05
        bool physxRigidBody:disableGravity = 0
        bool physxRigidBody:enableCCD = 0
        bool physxRigidBody:enableSpeculativeCCD = 0
        float physxRigidBody:linearDamping = 0
        int physxRigidBody:lockedPosAxis = 0
        int physxRigidBody:lockedRotAxis = 0
        float physxRigidBody:maxAngularVelocity = 5729.58
        float physxRigidBody:maxContactImpulse = inf
        float physxRigidBody:maxDepenetrationVelocity = 3
        float physxRigidBody:maxLinearVelocity = inf
        float physxRigidBody:sleepThreshold = 5e-7
        int physxRigidBody:solverPositionIterationCount = 16
        int physxRigidBody:solverVelocityIterationCount = 1
        float physxRigidBody:stabilizationThreshold = 0.0009999999
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.6772199860836565, -0.09347999363809834, -0.010319999225735677)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "Collision" (
            prepend apiSchemas = ["PhysxCollisionAPI", "PhysicsMeshCollisionAPI", "PhysicsCollisionAPI", "PhysicsMassAPI", "MaterialBindingAPI"]
            kind = "model"
        )
        {
            float3[] extent = [(-50, -50, -50), (50, 50, 50)]
            custom rel material:binding:physics = </iw_hub/caster_material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            uniform token physics:approximation = "boundingSphere"
            point3f physics:centerOfMass = (0, 0, 0)
            bool physics:collisionEnabled = 1
            float physxCollision:contactOffset = 0.02
            float physxCollision:minTorsionalPatchRadius = 0
            float physxCollision:restOffset = 0
            float physxCollision:torsionalPatchRadius = 0
            double radius = 0.4999999888241291
            token visibility = "invisible"
            float3 xformOp:scale = (0.14, 0.14, 0.14)
            uniform token[] xformOpOrder = ["xformOp:scale"]
        }

        def "Inner_Right_Wheel" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            prepend references = @HighResProps/Inner_Right_Wheel.usd@
        )
        {
            matrix4d xformOp:transform = ( (1.1920920834666274e-9, -0.009999992623928696, -1.1920920880028847e-9, 0), (-4.961186743378429e-18, -6.141041652054162e-18, 0.009999992623927438, 0), (-0.00999999262392806, -6.453278189961155e-18, 1.1920920775511425e-9, 0), (0, 0, 0, 1) )
        }
    }

    def PhysicsRevoluteJoint "left_wheel_joint" (
        prepend apiSchemas = ["RevoluteJointAPI", "PhysxJointAPI", "PhysicsDriveAPI:angular"]
    )
    {
        uniform token articulationType = "articulatedJoint"
        float drive:angular:physics:damping = 17453292
        float drive:angular:physics:maxForce = inf (
            customData = {
                dictionary omni = {
                    dictionary kit = {
                        dictionary property = {
                            dictionary usd = {
                                float2 soft_range_ui = (0, 0)
                            }
                        }
                    }
                }
            }
        )
        float drive:angular:physics:stiffness = 0
        float drive:angular:physics:targetVelocity = 0
        uniform token drive:angular:physics:type = "acceleration"
        custom token physics:axis = "Y"
        rel physics:body0 = </iw_hub/chassis>
        rel physics:body1 = </iw_hub/left_wheel>
        float physics:breakForce = inf
        float physics:breakTorque = inf
        bool physics:collisionEnabled = 0
        point3f physics:localPos0 = (0, 0.28963, 0)
        point3f physics:localPos1 = (0, 0, 0)
        quatf physics:localRot0 = (1, 0, 0, 0)
        quatf physics:localRot1 = (1, 0, 0, 0)
        bool physxJoint:enableProjection = 0
        float physxJoint:jointFriction = 0
        float physxJoint:maxJointVelocity = 57295780
    }

    def PhysicsRevoluteJoint "right_wheel_joint" (
        prepend apiSchemas = ["RevoluteJointAPI", "PhysxJointAPI", "PhysicsDriveAPI:angular"]
    )
    {
        uniform token articulationType = "articulatedJoint"
        float drive:angular:physics:damping = 17453292
        float drive:angular:physics:maxForce = inf (
            customData = {
                dictionary omni = {
                    dictionary kit = {
                        dictionary property = {
                            dictionary usd = {
                                float2 soft_range_ui = (0, 0)
                            }
                        }
                    }
                }
            }
        )
        float drive:angular:physics:stiffness = 0
        float drive:angular:physics:targetVelocity = 0
        uniform token drive:angular:physics:type = "acceleration"
        custom token physics:axis = "Y"
        rel physics:body0 = </iw_hub/chassis>
        rel physics:body1 = </iw_hub/right_wheel>
        float physics:breakForce = inf
        float physics:breakTorque = inf
        bool physics:collisionEnabled = 0
        point3f physics:localPos0 = (0, -0.28963, 0)
        point3f physics:localPos1 = (0, 0, 0)
        quatf physics:localRot0 = (1, 0, 0, 0)
        quatf physics:localRot1 = (1, 0, 0, 0)
        bool physxJoint:enableProjection = 0
        float physxJoint:jointFriction = 0
        float physxJoint:maxJointVelocity = 57295780
    }

    def PhysicsRevoluteJoint "left_swivel_joint" (
        prepend apiSchemas = ["RevoluteJointAPI", "PhysxJointAPI"]
    )
    {
        uniform token articulationType = "articulatedJoint"
        custom token physics:axis = "Z"
        rel physics:body0 = </iw_hub/chassis>
        rel physics:body1 = </iw_hub/left_swivel>
        float physics:breakForce = inf
        float physics:breakTorque = inf
        bool physics:collisionEnabled = 0
        point3f physics:localPos0 = (-0.65, 0.093480006, 0.074999996)
        point3f physics:localPos1 = (0.027220001, 9.536743e-9, 0.052320004)
        quatf physics:localRot0 = (1, 0, 0, 0)
        quatf physics:localRot1 = (1, 0, 0, 0)
        bool physxJoint:enableProjection = 0
        float physxJoint:jointFriction = 0
        float physxJoint:maxJointVelocity = 57295780
    }

    def PhysicsRevoluteJoint "right_swivel_joint" (
        prepend apiSchemas = ["RevoluteJointAPI", "PhysxJointAPI"]
    )
    {
        uniform token articulationType = "articulatedJoint"
        custom token physics:axis = "Z"
        rel physics:body0 = </iw_hub/chassis>
        rel physics:body1 = </iw_hub/right_swivel>
        float physics:breakForce = inf
        float physics:breakTorque = inf
        bool physics:collisionEnabled = 0
        point3f physics:localPos0 = (-0.65, -0.09347999, 0.074999996)
        point3f physics:localPos1 = (0.027220001, 0, 0.052320004)
        quatf physics:localRot0 = (1, 0, 0, 0)
        quatf physics:localRot1 = (1, 0, 0, 0)
        bool physxJoint:enableProjection = 0
        float physxJoint:jointFriction = 0
        float physxJoint:maxJointVelocity = 57295780
    }

    def PhysicsRevoluteJoint "left_caster_joint" (
        prepend apiSchemas = ["RevoluteJointAPI", "PhysxJointAPI"]
    )
    {
        uniform token articulationType = "articulatedJoint"
        custom token physics:axis = "Y"
        rel physics:body0 = </iw_hub/left_swivel>
        rel physics:body1 = </iw_hub/left_caster>
        float physics:breakForce = inf
        float physics:breakTorque = inf
        bool physics:collisionEnabled = 0
        point3f physics:localPos0 = (0, 0, -0.032999996)
        point3f physics:localPos1 = (0, 0, 0)
        quatf physics:localRot0 = (1, 0, 0, 0)
        quatf physics:localRot1 = (1, 0, 0, 0)
        bool physxJoint:enableProjection = 0
        float physxJoint:jointFriction = 0
        float physxJoint:maxJointVelocity = 57295780
    }

    def PhysicsRevoluteJoint "right_caster_joint" (
        prepend apiSchemas = ["RevoluteJointAPI", "PhysxJointAPI"]
    )
    {
        uniform token articulationType = "articulatedJoint"
        custom token physics:axis = "Y"
        rel physics:body0 = </iw_hub/right_swivel>
        rel physics:body1 = </iw_hub/right_caster>
        float physics:breakForce = inf
        float physics:breakTorque = inf
        bool physics:collisionEnabled = 0
        point3f physics:localPos0 = (0, 0, -0.032999996)
        point3f physics:localPos1 = (0, 0, 0)
        quatf physics:localRot0 = (1, 0, 0, 0)
        quatf physics:localRot1 = (1, 0, 0, 0)
        bool physxJoint:enableProjection = 0
        float physxJoint:jointFriction = 0
        float physxJoint:maxJointVelocity = 57295780
    }

    def PhysicsPrismaticJoint "lift_joint" (
        prepend apiSchemas = ["PhysxJointAPI", "PrismaticJointAPI", "PhysxLimitAPI:linear", "PhysicsDriveAPI:linear"]
    )
    {
        uniform token articulationType = "articulatedJoint"
        float drive:linear:physics:damping = 1000
        float drive:linear:physics:maxForce = inf (
            customData = {
                dictionary omni = {
                    dictionary kit = {
                        dictionary property = {
                            dictionary usd = {
                                float2 soft_range_ui = (0, 0)
                            }
                        }
                    }
                }
            }
        )
        float drive:linear:physics:stiffness = 1000000
        float drive:linear:physics:targetPosition = 0
        float drive:linear:physics:targetVelocity = 0
        uniform token drive:linear:physics:type = "acceleration"
        custom token physics:axis = "Z"
        rel physics:body0 = </iw_hub/chassis>
        rel physics:body1 = </iw_hub/lift>
        float physics:breakForce = inf
        float physics:breakTorque = inf
        bool physics:collisionEnabled = 0
        point3f physics:localPos0 = (0, 0, 0.094)
        point3f physics:localPos1 = (0, 0, 0.094)
        quatf physics:localRot0 = (1, 0, 0, 0)
        quatf physics:localRot1 = (1, 0, 0, 0)
        custom float physics:lowerLimit = 0
        custom float physics:upperLimit = 0.04
        bool physxJoint:enableProjection = 0
        float physxJoint:jointFriction = 0
        float physxJoint:maxJointVelocity = 1000000
        float physxLimit:linear:bounceThreshold = 0
        float physxLimit:linear:contactDistance = 0
        float physxLimit:linear:damping = 0
        float physxLimit:linear:restitution = 0
        float physxLimit:linear:stiffness = 0
    }

    def Material "wheel_material" (
        prepend apiSchemas = ["PhysxMaterialAPI", "PhysicsMaterialAPI"]
    )
    {
        float physics:density = 0
        float physics:dynamicFriction = 0.9
        float physics:restitution = 0
        float physics:staticFriction = 0.9
        uniform token physxMaterial:frictionCombineMode = "average"
        bool physxMaterial:improvePatchFriction = 1
        uniform token physxMaterial:restitutionCombineMode = "average"
    }

    def Material "caster_material" (
        prepend apiSchemas = ["PhysxMaterialAPI", "PhysicsMaterialAPI"]
    )
    {
        float physics:density = 0
        float physics:dynamicFriction = 0
        float physics:restitution = 0
        float physics:staticFriction = 0
        uniform token physxMaterial:frictionCombineMode = "average"
        bool physxMaterial:improvePatchFriction = 1
        uniform token physxMaterial:restitutionCombineMode = "average"
    }
}

