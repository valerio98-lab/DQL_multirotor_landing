#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (2.347518747868767, 3.121738381067497, 3.062192097561489)
                double3 target = (0.19261179558653785, -0.46970328442354825, 0.6731644639275536)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:backgroundColor" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:lensFlares:spectralBlurWavelengthRange" = (380, 550, 770)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
            float2 "rtx:viewTile:resolution" = (0, 0)
        }
    }
    defaultPrim = "World"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

def Xform "World"
{
    def Xform "GroundPlane"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "CollisionMesh"
        {
            uniform bool doubleSided = 0
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
            point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
            color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
            texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
                interpolation = "varying"
            )
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1.06, 1.06, 6.2466083)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Plane "CollisionPlane" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            uniform token purpose = "guide"
        }
    }

    def Scope "WizardSharedVehicleData"
    {
        def PhysicsScene "PhysicsScene" (
            prepend apiSchemas = ["PhysxSceneAPI", "PhysxVehicleContextAPI"]
        )
        {
            vector3f physics:gravityDirection = (0, 0, -1)
            float physics:gravityMagnitude = 9.81
            uniform token physxVehicleContext:longitudinalAxis = "posX"
            uniform token physxVehicleContext:updateMode = "velocityChange"
            uniform token physxVehicleContext:verticalAxis = "posZ"
        }

        def Material "VehicleGroundMaterial" (
            prepend apiSchemas = ["PhysicsMaterialAPI", "PhysxMaterialAPI"]
        )
        {
            float physics:dynamicFriction = 0.7
            float physics:restitution = 0
            float physics:staticFriction = 0.9
        }

        def PhysxVehicleTireFrictionTable "SummerTireFrictionTable"
        {
            float[] frictionValues = [0.75]
            prepend rel groundMaterials = </World/WizardSharedVehicleData/VehicleGroundMaterial>
        }

        def PhysicsCollisionGroup "VehicleChassisCollisionGroup"
        {
            prepend rel collection:colliders:includes = </World/WizardVehicle1/Vehicle/ChassisCollision>
            prepend rel physics:filteredGroups = </World/WizardSharedVehicleData/VehicleGroundQueryGroup>
        }

        def PhysicsCollisionGroup "VehicleWheelCollisionGroup"
        {
            prepend rel physics:filteredGroups = [
                </World/WizardSharedVehicleData/VehicleWheelCollisionGroup>,
                </World/WizardSharedVehicleData/VehicleGroundQueryGroup>,
            ]
        }

        def PhysicsCollisionGroup "VehicleGroundQueryGroup"
        {
            prepend rel physics:filteredGroups = [
                </World/WizardSharedVehicleData/VehicleChassisCollisionGroup>,
                </World/WizardSharedVehicleData/VehicleWheelCollisionGroup>,
            ]
        }

        def PhysicsCollisionGroup "GroundSurfaceCollisionGroup"
        {
            prepend rel physics:filteredGroups = [
                </World/WizardSharedVehicleData/GroundSurfaceCollisionGroup>,
                </World/WizardSharedVehicleData/VehicleWheelCollisionGroup>,
            ]
        }
    }

    def Scope "WizardVehicle1"
    {
    }
}

def Xform "Environment"
{
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float inputs:angle = 1
        float inputs:intensity = 3000
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness
        float inputs:shaping:focus
        color3f inputs:shaping:focusTint
        asset inputs:shaping:ies:file
        quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

def "Crazyflie" (
    prepend references = @http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/4.2/Isaac/Robots/Crazyflie/cf2x.usd@
)
{
    float3 xformOp:rotateXYZ = (0, 0, 0)
    float3 xformOp:scale = (5, 5, 1)
    double3 xformOp:translate = (0.3201761159505598, -0.14667780052428567, 1.1156965584547742)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

    over "body"
    {
    }

    over "m1_prop"
    {
    }

    over "m2_prop"
    {
    }

    over "m3_prop"
    {
    }

    over "m4_prop"
    {
    }
}

