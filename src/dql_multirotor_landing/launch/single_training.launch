<?xml version="1.0"?>
<launch>
	<!-- ===================== -->
	<!-- PARAMETERS -->
	<!-- ===================== -->
	<param name="use_sim_time" value="true" />
	<param name="robot_description" textfile="$(find dql_multirotor_landing)/urdf/moving_platform.urdf" />
	<!-- TODO: May remove? -->
	<arg name="paused" default="false" />
	<arg name="headless" default="false" />
	<arg name="debug" default="false" />
	<arg name="world_name" default="basic" />
	<arg name="mav_name" default="hummingbird" />
	<arg name="drone_name" default="$(arg mav_name)" />
	<arg name="enable_wind" default="true" />
	<arg name="enable_physics" default="true" />
	<arg name="enable_sensors" default="true" />
	<arg name="enable_logging" default="false" />
	<arg name="enable_ground_truth" default="true" />
	<arg name="enable_mavlink_interface" default="false" />
	<arg name="log_file" default="$(arg mav_name)_$(arg drone_name)" />
	<arg name="wait_to_record_bag" default="false" />
	<arg name="verbose" default="false" />
	<arg name="X" default="0.0" />
	<arg name="Y" default="0.0" />
	<arg name="Z" default="2.0" />
	<arg name="ros_port" default="11311" />
	<arg name="gaz_port" default="11351" />
	<arg name="ros_ip" default="127.0.0.1" />
	<env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models" />
	<env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models" />
	<env name="ROS_IP" value="$(arg ros_ip)" />
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find dql_multirotor_landing)/worlds/$(arg world_name).world" />
		<arg name="debug" value="$(arg debug)" />
		<arg name="paused" value="$(arg paused)" />
		<arg name="gui" value="true" />
		<arg name="verbose" value="$(arg verbose)" />
	</include>
	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" args="-z 1.0 -unpause -urdf -model moving_platform -param robot_description" respawn="false" output="screen" />
	<rosparam command="load" file="$(find dql_multirotor_landing)/config/moving_platform_joints.yaml" ns="moving_platform" />
	<group ns="$(arg drone_name)">
		<node name="manager_node" pkg="dql_multirotor_landing" type="manager_node.py" output="screen">
			<param name="drone_name" value="$(arg drone_name)" />
			<!-- Parametri specifici per la moving platform (nella nuova struttura, questi verranno usati dal nodo unificato) -->
			<param name="moving_platform/trajectory_type" value="rpm" />
			<!-- eight, rpm -->
			<param name="moving_platform/t_x" value="1.6" />
			<param name="moving_platform/frequency" value="100" />
			<param name="moving_platform/r_x" value="2" />
			<param name="moving_platform/start_position/x" value="0" />
			<param name="moving_platform/start_position/y" value="0" />
			<param name="moving_platform/start_position/z" value="0.0" />
			<param name="moving_platform/start_orientation/phi" value="0" />
			<param name="moving_platform/start_orientation/theta" value="0" />
			<param name="moving_platform/start_orientation/psi" value="0" />
			<param name="moving_platform/t_y" value="0.0" />
			<param name="moving_platform/r_y" value="2" />
		</node>
	</group>
	<!-- ********** spawn model ********** -->
	<include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
		<arg name="mav_name" value="$(arg mav_name)" />
		<!-- odom and imu should be included in mav_generic_odometry_sensor.gazebo -->
		<arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
		<arg name="enable_logging" value="$(arg enable_logging)" />
		<arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
		<arg name="log_file" value="$(arg log_file)" />
		<arg name="namespace" value="$(arg drone_name)" />
		<arg name="x" value="$(arg X)" />
		<arg name="y" value="$(arg Y)" />
		<arg name="z" value="$(arg Z)" />
	</include>
	<node name="roll_pitch_yawrate_thrust_controller_node" pkg="rotors_control" type="roll_pitch_yawrate_thrust_controller_node" output="screen">
		<rosparam command="load" file="$(find rotors_gazebo)/resource/roll_pitch_yawrate_thrust_controller_$(arg mav_name).yaml" />
		<rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
		<remap from="odometry" to="odometry_sensor1/odometry" />
	</node>
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
	<node name="controller_v_z" pkg="pid" type="controller" ns="pid_v_z" output="screen">
		<param name="node_name" value="pid_v_z" />
		<param name="Kp" value="5.0" />
		<param name="Ki" value="10.0" />
		<param name="Kd" value="0" />
		<param name="upper_limit" value="10" />
		<param name="lower_limit" value="0" />
		<param name="windup_limit" value="10" />
		<param name="max_loop_frequency" value="1000.0" />
		<param name="min_loop_frequency" value="1.0" />
		<param name="topic_from_controller" value="/$(arg drone_name)/training_action_interface/control_effort/v_z/" />
		<param name="topic_from_plant" value="/$(arg drone_name)/training_action_interface/state/v_z" />
		<param name="setpoint_topic" value="/$(arg drone_name)/training_action_interface/setpoint/v_z" />
	</node>
	<node name="controller_yaw" pkg="pid" type="controller" ns="pid_yaw" output="screen">
		<param name="node_name" value="pid_yaw" />
		<param name="Kp" value="8" />
		<param name="Ki" value="1.0" />
		<param name="Kd" value="0" />
		<param name="upper_limit" value="3.141592" />
		<param name="lower_limit" value="-3.141592" />
		<param name="windup_limit" value="5" />
		<param name="max_loop_frequency" value="1000.0" />
		<param name="min_loop_frequency" value="1.0" />
		<param name="topic_from_controller" value="/$(arg drone_name)/training_action_interface/control_effort/yaw" />
		<param name="topic_from_plant" value="/$(arg drone_name)/training_action_interface/state/yaw" />
		<param name="setpoint_topic" value="/$(arg drone_name)/training_action_interface/setpoint/yaw" />
	</node>
	<group ns="$(arg drone_name)">
		<node name="landing_simulation_gym_node" pkg="dql_multirotor_landing" type="training.py" output="screen">
			<param name="drone_name" value="$(arg drone_name)" />
		</node>
	</group>
</launch>
